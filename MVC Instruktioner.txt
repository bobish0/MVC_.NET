I den h√§r labben kommer vi att utforska MVC i .NET Core

----------------------------------------------------------------
Labb 0 - F√∂rberedelser (Visual Studio Professional)
----------------------------------------------------------------

H√§mta ner Mvc projektet fr√•n gitlab till din Projects mapp med:
$ git clone git@git.valtech.se:talangprogrammet/Mvc.git
√ñppna Mvc.sln med Visual Studio

----------------------------------------------------------------
Labb 1 - Hello World!
----------------------------------------------------------------

1. Kompilera och k√∂r projektet (Start without debugging, ctrl+F5)
2. Var i koden anges att "Hello World!" ska skrivas ut?
3. L√§gg till "services.AddMvc();" i StartUp.ConfigureServices och importera
    "Microsoft.AspNetCore.Mvc".
4. Byt ut app.Run-anropet i StartUp.Configure mot

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });

5. Skapa en mapp Controllers och l√§gg till en klass (shift+alt+c) HomeController
6. L√•t den nya klassen √§rva fr√•n "Controller" (using Microsoft.AspNetCore.Mvc)
7. L√§gg in f√∂ljande metod

        public IActionResult Index()
        {
            return View();
        }

8. Skapa en mapp Views, undermapp Home med en ny fil Index.cshtml
9. Filen ska inneh√•lla "<p>Hello View!</p>", kompilera och k√∂r (ctrl+F5)
10. Grattis, du har skapat en defaultroute, en controller och en vy!


----------------------------------------------------------------
Labb 2 - Shared Layout
----------------------------------------------------------------

1. Skapa en ny undermapp till Views som du d√∂per till Shared
2. Kopiera in _Layout.cshtml till Shared-mappen
3. Skapa en ny fil Views/_ViewStart.cshtml med @{ Layout = "_Layout"; }
4. L√§gg till @{ ViewData["Title"] = "En titel"; } h√∂gst upp i Index.cshtml
5. Kompilera och k√∂r (ctrl+F5) s√• borde du se "¬© 2017 Talangprogrammet"
6. Byt ut "Talangprogrammet" i _Layout.cshtml mot ditt eget namn och ladda om


----------------------------------------------------------------
Labb 3 - Model
----------------------------------------------------------------

1. Skapa en mapp som du d√∂per till Models
2. Skapa en klass som du d√∂per till Project
3. L√§gg till n√•gra properties till din modell:

        public int Id { get; set; }
        public string Name { get; set; }
        public string ProductOwner { get; set; }
        public List<string> Team { get; set; }
        public DateTime StartDate { get; set; }

4. G√• till HomeController och √§ndra Index-metoden:

        public ViewResult Index()
        {
            var project = new Project
            {
                Id = 1,
                Name = "Ett projekt",
                ProductOwner = "Ulf Sidemo",
                Team = new List<string>
                {
                    "Andy", "Daniel", "Gabriel", "Gustav",
                    "Hampus", "Joakim", "Kristofer", "Maria",
                    "Per", "P√•l", "Someya", "Tony", "Victor"
                },
                StartDate = new DateTime(2018, 2, 14)
            };

            return View("Index", project.Name);
        }

5. G√• till Views/Home/Index.cshtml och byt ut inneh√•llet mot

        @using Mvc.Models           BORT?
        @model string

        @{
            ViewData["Title"] = "En titel";
        }

        <p>@Model</p>

6. Kompilera och k√∂r (ctrl+F5) s√• borde du se "Ett projekt"
7. √Ñndra modellen till Project (i vy och controller)
8. Skriv ut produkt√§garens namn, startdatumet och alla team-medlemmar i vyn
9. Skapa en ny modell Consultant f√∂r att representera team-medlemmar och anv√§nd
    den ist√§llet f√∂r string i Team-propertyn i Project-modellen.
    Team = new[] {...}.Select(name => new Consultant { Name = name }).ToList();

10. Modifiera vyn s√• att data skrivs ut korrekt igen


----------------------------------------------------------------
Labb 4 - Routing och Model binding
----------------------------------------------------------------

1. Skapa en ConsultantController med action Index, en vy
    Views/Consultant/Index.cshtml och skicka med en consultant fr√•n controllern
    till vyn
2. Skapa en action Create med [HttpGet]-attribut, och vy Create.cshtml med
    formul√§r inneh√•llandes input-f√§lt som matchar Consultant-modellen, antingen
    med vanlig html eller med helper-metoder i stil med

        @using (Html.BeginForm())
        {
            @Html.TextBox("Name");
            <input type="submit" value="Skapa">
        }

3. I din controller, skapa en action Create med [HttpPost]-attribut och en
    Consultant som argument (model binding). Returnera Index-vyn med denna.
4. Verifiera att det skapas en consultant och att denna skickas vidare till
    Index-vyn fr√•n /consultant/create
7. L√§gg till "int projectId" som ytterligare argument till din Create-action,
    och skapa ett input-f√§lt i Create.cshtml
8. Kontrollera att du kan h√§mta b√•de Consultant och projectId i Create

----------------------------------------------------------------
Labb 5 - Section, partial views, paginering
----------------------------------------------------------------

1. L√§gg till en section i din _Layout.cshtml och ange text i en vy som skrivs
    i denna section
2. Bryt ut partial views fr√•n dina vyer, f√∂r tex att visa en Consultant
3. Skapa en vy som visar alla konsulter fr√•n en h√•rdkodad lista om minst 10
4. Modifiera vyn med paginering s√• att max 5 visas i taget

----------------------------------------------------------------
Labb 6 - The end
----------------------------------------------------------------

- Du var en snabb en! üèéÔ∏èüí® 
- Hj√§lp din granne eller l√∂s lite uppgifter p√• Code Wars: https://www.codewars.com

